// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: channel.sql

package sqlc

import (
	"context"
)

const addGuildChannel = `-- name: AddGuildChannel :exec
INSERT INTO channels (channel_id, guild_id, running)
VALUES ($1, $2, $3)
`

type AddGuildChannelParams struct {
	ChannelID int64
	GuildID   int64
	Running   bool
}

func (q *Queries) AddGuildChannel(ctx context.Context, arg AddGuildChannelParams) error {
	_, err := q.exec(ctx, q.addGuildChannelStmt, addGuildChannel, arg.ChannelID, arg.GuildID, arg.Running)
	return err
}

const getChannel = `-- name: GetChannel :many
SELECT running
FROM channels
WHERE guild_id = $1
AND channel_id = $2
LIMIT 1
`

type GetChannelParams struct {
	GuildID   int64
	ChannelID int64
}

func (q *Queries) GetChannel(ctx context.Context, arg GetChannelParams) ([]bool, error) {
	rows, err := q.query(ctx, q.getChannelStmt, getChannel, arg.GuildID, arg.ChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []bool{}
	for rows.Next() {
		var running bool
		if err := rows.Scan(&running); err != nil {
			return nil, err
		}
		items = append(items, running)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGuildChannels = `-- name: ListGuildChannels :many
SELECT channel_id, running
FROM channels
WHERE guild_id = $1
ORDER BY channel_id ASC
`

type ListGuildChannelsRow struct {
	ChannelID int64
	Running   bool
}

func (q *Queries) ListGuildChannels(ctx context.Context, guildID int64) ([]ListGuildChannelsRow, error) {
	rows, err := q.query(ctx, q.listGuildChannelsStmt, listGuildChannels, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGuildChannelsRow{}
	for rows.Next() {
		var i ListGuildChannelsRow
		if err := rows.Scan(&i.ChannelID, &i.Running); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGuildChannel = `-- name: RemoveGuildChannel :exec
DELETE FROM channels
WHERE guild_id = $1
AND channel_id = $2
`

type RemoveGuildChannelParams struct {
	GuildID   int64
	ChannelID int64
}

func (q *Queries) RemoveGuildChannel(ctx context.Context, arg RemoveGuildChannelParams) error {
	_, err := q.exec(ctx, q.removeGuildChannelStmt, removeGuildChannel, arg.GuildID, arg.ChannelID)
	return err
}

const startChannel = `-- name: StartChannel :exec
UPDATE channels
SET running = TRUE
WHERE guild_id = $1
AND channel_id = $2
`

type StartChannelParams struct {
	GuildID   int64
	ChannelID int64
}

func (q *Queries) StartChannel(ctx context.Context, arg StartChannelParams) error {
	_, err := q.exec(ctx, q.startChannelStmt, startChannel, arg.GuildID, arg.ChannelID)
	return err
}

const stopChannel = `-- name: StopChannel :exec
UPDATE channels
SET running = FALSE
WHERE guild_id = $1
AND channel_id = $2
`

type StopChannelParams struct {
	GuildID   int64
	ChannelID int64
}

func (q *Queries) StopChannel(ctx context.Context, arg StopChannelParams) error {
	_, err := q.exec(ctx, q.stopChannelStmt, stopChannel, arg.GuildID, arg.ChannelID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForInsertActiveServerClients implements pgx.CopyFromSource.
type iteratorForInsertActiveServerClients struct {
	rows                 []InsertActiveServerClientsParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertActiveServerClients) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertActiveServerClients) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Address,
		r.rows[0].Name,
		r.rows[0].Clan,
		r.rows[0].CountryID,
		r.rows[0].Score,
		r.rows[0].IsPlayer,
		r.rows[0].Team,
	}, nil
}

func (r iteratorForInsertActiveServerClients) Err() error {
	return nil
}

func (q *Queries) InsertActiveServerClients(ctx context.Context, arg []InsertActiveServerClientsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"active_server_clients"}, []string{"address", "name", "clan", "country_id", "score", "is_player", "team"}, &iteratorForInsertActiveServerClients{rows: arg})
}

// iteratorForInsertActiveServers implements pgx.CopyFromSource.
type iteratorForInsertActiveServers struct {
	rows                 []InsertActiveServersParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertActiveServers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertActiveServers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Timestamp,
		r.rows[0].Address,
		r.rows[0].Protocols,
		r.rows[0].Name,
		r.rows[0].Gametype,
		r.rows[0].Passworded,
		r.rows[0].Map,
		r.rows[0].MapSha256sum,
		r.rows[0].MapSize,
		r.rows[0].Version,
		r.rows[0].MaxClients,
		r.rows[0].MaxPlayers,
		r.rows[0].ScoreKind,
	}, nil
}

func (r iteratorForInsertActiveServers) Err() error {
	return nil
}

func (q *Queries) InsertActiveServers(ctx context.Context, arg []InsertActiveServersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"active_servers"}, []string{"timestamp", "address", "protocols", "name", "gametype", "passworded", "map", "map_sha256sum", "map_size", "version", "max_clients", "max_players", "score_kind"}, &iteratorForInsertActiveServers{rows: arg})
}

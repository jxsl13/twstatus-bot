// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addFlagStmt, err = db.PrepareContext(ctx, addFlag); err != nil {
		return nil, fmt.Errorf("error preparing query AddFlag: %w", err)
	}
	if q.addFlagMappingStmt, err = db.PrepareContext(ctx, addFlagMapping); err != nil {
		return nil, fmt.Errorf("error preparing query AddFlagMapping: %w", err)
	}
	if q.addGuildStmt, err = db.PrepareContext(ctx, addGuild); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuild: %w", err)
	}
	if q.addGuildChannelStmt, err = db.PrepareContext(ctx, addGuildChannel); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildChannel: %w", err)
	}
	if q.addPrevActiveServerStmt, err = db.PrepareContext(ctx, addPrevActiveServer); err != nil {
		return nil, fmt.Errorf("error preparing query AddPrevActiveServer: %w", err)
	}
	if q.addPrevActiveServerClientStmt, err = db.PrepareContext(ctx, addPrevActiveServerClient); err != nil {
		return nil, fmt.Errorf("error preparing query AddPrevActiveServerClient: %w", err)
	}
	if q.addTrackingStmt, err = db.PrepareContext(ctx, addTracking); err != nil {
		return nil, fmt.Errorf("error preparing query AddTracking: %w", err)
	}
	if q.deleteActiveServerClientsStmt, err = db.PrepareContext(ctx, deleteActiveServerClients); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActiveServerClients: %w", err)
	}
	if q.deleteActiveServersStmt, err = db.PrepareContext(ctx, deleteActiveServers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteActiveServers: %w", err)
	}
	if q.existsServerStmt, err = db.PrepareContext(ctx, existsServer); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsServer: %w", err)
	}
	if q.getChannelStmt, err = db.PrepareContext(ctx, getChannel); err != nil {
		return nil, fmt.Errorf("error preparing query GetChannel: %w", err)
	}
	if q.getFlagStmt, err = db.PrepareContext(ctx, getFlag); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlag: %w", err)
	}
	if q.getFlagByAbbrStmt, err = db.PrepareContext(ctx, getFlagByAbbr); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlagByAbbr: %w", err)
	}
	if q.getFlagMappingStmt, err = db.PrepareContext(ctx, getFlagMapping); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlagMapping: %w", err)
	}
	if q.getGuildStmt, err = db.PrepareContext(ctx, getGuild); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuild: %w", err)
	}
	if q.getMessageTargetNotificationsStmt, err = db.PrepareContext(ctx, getMessageTargetNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageTargetNotifications: %w", err)
	}
	if q.getPlayerCountNotificationStmt, err = db.PrepareContext(ctx, getPlayerCountNotification); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerCountNotification: %w", err)
	}
	if q.getPrevActiveServerClientsStmt, err = db.PrepareContext(ctx, getPrevActiveServerClients); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrevActiveServerClients: %w", err)
	}
	if q.insertActiveServerClientsStmt, err = db.PrepareContext(ctx, insertActiveServerClients); err != nil {
		return nil, fmt.Errorf("error preparing query InsertActiveServerClients: %w", err)
	}
	if q.insertActiveServersStmt, err = db.PrepareContext(ctx, insertActiveServers); err != nil {
		return nil, fmt.Errorf("error preparing query InsertActiveServers: %w", err)
	}
	if q.listAllTrackingsStmt, err = db.PrepareContext(ctx, listAllTrackings); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllTrackings: %w", err)
	}
	if q.listFlagMappingsStmt, err = db.PrepareContext(ctx, listFlagMappings); err != nil {
		return nil, fmt.Errorf("error preparing query ListFlagMappings: %w", err)
	}
	if q.listFlagsStmt, err = db.PrepareContext(ctx, listFlags); err != nil {
		return nil, fmt.Errorf("error preparing query ListFlags: %w", err)
	}
	if q.listGuildChannelsStmt, err = db.PrepareContext(ctx, listGuildChannels); err != nil {
		return nil, fmt.Errorf("error preparing query ListGuildChannels: %w", err)
	}
	if q.listGuildsStmt, err = db.PrepareContext(ctx, listGuilds); err != nil {
		return nil, fmt.Errorf("error preparing query ListGuilds: %w", err)
	}
	if q.listPlayerCountNotificationsStmt, err = db.PrepareContext(ctx, listPlayerCountNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query ListPlayerCountNotifications: %w", err)
	}
	if q.listPrevActiveServersStmt, err = db.PrepareContext(ctx, listPrevActiveServers); err != nil {
		return nil, fmt.Errorf("error preparing query ListPrevActiveServers: %w", err)
	}
	if q.listTrackedServerClientsStmt, err = db.PrepareContext(ctx, listTrackedServerClients); err != nil {
		return nil, fmt.Errorf("error preparing query ListTrackedServerClients: %w", err)
	}
	if q.listTrackedServersStmt, err = db.PrepareContext(ctx, listTrackedServers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTrackedServers: %w", err)
	}
	if q.removeFlagMappingStmt, err = db.PrepareContext(ctx, removeFlagMapping); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveFlagMapping: %w", err)
	}
	if q.removeGuildStmt, err = db.PrepareContext(ctx, removeGuild); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveGuild: %w", err)
	}
	if q.removeGuildChannelStmt, err = db.PrepareContext(ctx, removeGuildChannel); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveGuildChannel: %w", err)
	}
	if q.removePlayerCountNotificationStmt, err = db.PrepareContext(ctx, removePlayerCountNotification); err != nil {
		return nil, fmt.Errorf("error preparing query RemovePlayerCountNotification: %w", err)
	}
	if q.removePlayerCountNotificationsStmt, err = db.PrepareContext(ctx, removePlayerCountNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query RemovePlayerCountNotifications: %w", err)
	}
	if q.removePrevActiveServerStmt, err = db.PrepareContext(ctx, removePrevActiveServer); err != nil {
		return nil, fmt.Errorf("error preparing query RemovePrevActiveServer: %w", err)
	}
	if q.removePrevActiveServerClientStmt, err = db.PrepareContext(ctx, removePrevActiveServerClient); err != nil {
		return nil, fmt.Errorf("error preparing query RemovePrevActiveServerClient: %w", err)
	}
	if q.removeTrackingByMessageIdStmt, err = db.PrepareContext(ctx, removeTrackingByMessageId); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTrackingByMessageId: %w", err)
	}
	if q.setPlayerCountNotificationStmt, err = db.PrepareContext(ctx, setPlayerCountNotification); err != nil {
		return nil, fmt.Errorf("error preparing query SetPlayerCountNotification: %w", err)
	}
	if q.startChannelStmt, err = db.PrepareContext(ctx, startChannel); err != nil {
		return nil, fmt.Errorf("error preparing query StartChannel: %w", err)
	}
	if q.stopChannelStmt, err = db.PrepareContext(ctx, stopChannel); err != nil {
		return nil, fmt.Errorf("error preparing query StopChannel: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addFlagStmt != nil {
		if cerr := q.addFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFlagStmt: %w", cerr)
		}
	}
	if q.addFlagMappingStmt != nil {
		if cerr := q.addFlagMappingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFlagMappingStmt: %w", cerr)
		}
	}
	if q.addGuildStmt != nil {
		if cerr := q.addGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildStmt: %w", cerr)
		}
	}
	if q.addGuildChannelStmt != nil {
		if cerr := q.addGuildChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildChannelStmt: %w", cerr)
		}
	}
	if q.addPrevActiveServerStmt != nil {
		if cerr := q.addPrevActiveServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPrevActiveServerStmt: %w", cerr)
		}
	}
	if q.addPrevActiveServerClientStmt != nil {
		if cerr := q.addPrevActiveServerClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPrevActiveServerClientStmt: %w", cerr)
		}
	}
	if q.addTrackingStmt != nil {
		if cerr := q.addTrackingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTrackingStmt: %w", cerr)
		}
	}
	if q.deleteActiveServerClientsStmt != nil {
		if cerr := q.deleteActiveServerClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActiveServerClientsStmt: %w", cerr)
		}
	}
	if q.deleteActiveServersStmt != nil {
		if cerr := q.deleteActiveServersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteActiveServersStmt: %w", cerr)
		}
	}
	if q.existsServerStmt != nil {
		if cerr := q.existsServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsServerStmt: %w", cerr)
		}
	}
	if q.getChannelStmt != nil {
		if cerr := q.getChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChannelStmt: %w", cerr)
		}
	}
	if q.getFlagStmt != nil {
		if cerr := q.getFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagStmt: %w", cerr)
		}
	}
	if q.getFlagByAbbrStmt != nil {
		if cerr := q.getFlagByAbbrStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagByAbbrStmt: %w", cerr)
		}
	}
	if q.getFlagMappingStmt != nil {
		if cerr := q.getFlagMappingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagMappingStmt: %w", cerr)
		}
	}
	if q.getGuildStmt != nil {
		if cerr := q.getGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuildStmt: %w", cerr)
		}
	}
	if q.getMessageTargetNotificationsStmt != nil {
		if cerr := q.getMessageTargetNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageTargetNotificationsStmt: %w", cerr)
		}
	}
	if q.getPlayerCountNotificationStmt != nil {
		if cerr := q.getPlayerCountNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerCountNotificationStmt: %w", cerr)
		}
	}
	if q.getPrevActiveServerClientsStmt != nil {
		if cerr := q.getPrevActiveServerClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPrevActiveServerClientsStmt: %w", cerr)
		}
	}
	if q.insertActiveServerClientsStmt != nil {
		if cerr := q.insertActiveServerClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertActiveServerClientsStmt: %w", cerr)
		}
	}
	if q.insertActiveServersStmt != nil {
		if cerr := q.insertActiveServersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertActiveServersStmt: %w", cerr)
		}
	}
	if q.listAllTrackingsStmt != nil {
		if cerr := q.listAllTrackingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllTrackingsStmt: %w", cerr)
		}
	}
	if q.listFlagMappingsStmt != nil {
		if cerr := q.listFlagMappingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFlagMappingsStmt: %w", cerr)
		}
	}
	if q.listFlagsStmt != nil {
		if cerr := q.listFlagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFlagsStmt: %w", cerr)
		}
	}
	if q.listGuildChannelsStmt != nil {
		if cerr := q.listGuildChannelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGuildChannelsStmt: %w", cerr)
		}
	}
	if q.listGuildsStmt != nil {
		if cerr := q.listGuildsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGuildsStmt: %w", cerr)
		}
	}
	if q.listPlayerCountNotificationsStmt != nil {
		if cerr := q.listPlayerCountNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPlayerCountNotificationsStmt: %w", cerr)
		}
	}
	if q.listPrevActiveServersStmt != nil {
		if cerr := q.listPrevActiveServersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPrevActiveServersStmt: %w", cerr)
		}
	}
	if q.listTrackedServerClientsStmt != nil {
		if cerr := q.listTrackedServerClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTrackedServerClientsStmt: %w", cerr)
		}
	}
	if q.listTrackedServersStmt != nil {
		if cerr := q.listTrackedServersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTrackedServersStmt: %w", cerr)
		}
	}
	if q.removeFlagMappingStmt != nil {
		if cerr := q.removeFlagMappingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeFlagMappingStmt: %w", cerr)
		}
	}
	if q.removeGuildStmt != nil {
		if cerr := q.removeGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeGuildStmt: %w", cerr)
		}
	}
	if q.removeGuildChannelStmt != nil {
		if cerr := q.removeGuildChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeGuildChannelStmt: %w", cerr)
		}
	}
	if q.removePlayerCountNotificationStmt != nil {
		if cerr := q.removePlayerCountNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removePlayerCountNotificationStmt: %w", cerr)
		}
	}
	if q.removePlayerCountNotificationsStmt != nil {
		if cerr := q.removePlayerCountNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removePlayerCountNotificationsStmt: %w", cerr)
		}
	}
	if q.removePrevActiveServerStmt != nil {
		if cerr := q.removePrevActiveServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removePrevActiveServerStmt: %w", cerr)
		}
	}
	if q.removePrevActiveServerClientStmt != nil {
		if cerr := q.removePrevActiveServerClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removePrevActiveServerClientStmt: %w", cerr)
		}
	}
	if q.removeTrackingByMessageIdStmt != nil {
		if cerr := q.removeTrackingByMessageIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTrackingByMessageIdStmt: %w", cerr)
		}
	}
	if q.setPlayerCountNotificationStmt != nil {
		if cerr := q.setPlayerCountNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPlayerCountNotificationStmt: %w", cerr)
		}
	}
	if q.startChannelStmt != nil {
		if cerr := q.startChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing startChannelStmt: %w", cerr)
		}
	}
	if q.stopChannelStmt != nil {
		if cerr := q.stopChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing stopChannelStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	addFlagStmt                        *sql.Stmt
	addFlagMappingStmt                 *sql.Stmt
	addGuildStmt                       *sql.Stmt
	addGuildChannelStmt                *sql.Stmt
	addPrevActiveServerStmt            *sql.Stmt
	addPrevActiveServerClientStmt      *sql.Stmt
	addTrackingStmt                    *sql.Stmt
	deleteActiveServerClientsStmt      *sql.Stmt
	deleteActiveServersStmt            *sql.Stmt
	existsServerStmt                   *sql.Stmt
	getChannelStmt                     *sql.Stmt
	getFlagStmt                        *sql.Stmt
	getFlagByAbbrStmt                  *sql.Stmt
	getFlagMappingStmt                 *sql.Stmt
	getGuildStmt                       *sql.Stmt
	getMessageTargetNotificationsStmt  *sql.Stmt
	getPlayerCountNotificationStmt     *sql.Stmt
	getPrevActiveServerClientsStmt     *sql.Stmt
	insertActiveServerClientsStmt      *sql.Stmt
	insertActiveServersStmt            *sql.Stmt
	listAllTrackingsStmt               *sql.Stmt
	listFlagMappingsStmt               *sql.Stmt
	listFlagsStmt                      *sql.Stmt
	listGuildChannelsStmt              *sql.Stmt
	listGuildsStmt                     *sql.Stmt
	listPlayerCountNotificationsStmt   *sql.Stmt
	listPrevActiveServersStmt          *sql.Stmt
	listTrackedServerClientsStmt       *sql.Stmt
	listTrackedServersStmt             *sql.Stmt
	removeFlagMappingStmt              *sql.Stmt
	removeGuildStmt                    *sql.Stmt
	removeGuildChannelStmt             *sql.Stmt
	removePlayerCountNotificationStmt  *sql.Stmt
	removePlayerCountNotificationsStmt *sql.Stmt
	removePrevActiveServerStmt         *sql.Stmt
	removePrevActiveServerClientStmt   *sql.Stmt
	removeTrackingByMessageIdStmt      *sql.Stmt
	setPlayerCountNotificationStmt     *sql.Stmt
	startChannelStmt                   *sql.Stmt
	stopChannelStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		addFlagStmt:                        q.addFlagStmt,
		addFlagMappingStmt:                 q.addFlagMappingStmt,
		addGuildStmt:                       q.addGuildStmt,
		addGuildChannelStmt:                q.addGuildChannelStmt,
		addPrevActiveServerStmt:            q.addPrevActiveServerStmt,
		addPrevActiveServerClientStmt:      q.addPrevActiveServerClientStmt,
		addTrackingStmt:                    q.addTrackingStmt,
		deleteActiveServerClientsStmt:      q.deleteActiveServerClientsStmt,
		deleteActiveServersStmt:            q.deleteActiveServersStmt,
		existsServerStmt:                   q.existsServerStmt,
		getChannelStmt:                     q.getChannelStmt,
		getFlagStmt:                        q.getFlagStmt,
		getFlagByAbbrStmt:                  q.getFlagByAbbrStmt,
		getFlagMappingStmt:                 q.getFlagMappingStmt,
		getGuildStmt:                       q.getGuildStmt,
		getMessageTargetNotificationsStmt:  q.getMessageTargetNotificationsStmt,
		getPlayerCountNotificationStmt:     q.getPlayerCountNotificationStmt,
		getPrevActiveServerClientsStmt:     q.getPrevActiveServerClientsStmt,
		insertActiveServerClientsStmt:      q.insertActiveServerClientsStmt,
		insertActiveServersStmt:            q.insertActiveServersStmt,
		listAllTrackingsStmt:               q.listAllTrackingsStmt,
		listFlagMappingsStmt:               q.listFlagMappingsStmt,
		listFlagsStmt:                      q.listFlagsStmt,
		listGuildChannelsStmt:              q.listGuildChannelsStmt,
		listGuildsStmt:                     q.listGuildsStmt,
		listPlayerCountNotificationsStmt:   q.listPlayerCountNotificationsStmt,
		listPrevActiveServersStmt:          q.listPrevActiveServersStmt,
		listTrackedServerClientsStmt:       q.listTrackedServerClientsStmt,
		listTrackedServersStmt:             q.listTrackedServersStmt,
		removeFlagMappingStmt:              q.removeFlagMappingStmt,
		removeGuildStmt:                    q.removeGuildStmt,
		removeGuildChannelStmt:             q.removeGuildChannelStmt,
		removePlayerCountNotificationStmt:  q.removePlayerCountNotificationStmt,
		removePlayerCountNotificationsStmt: q.removePlayerCountNotificationsStmt,
		removePrevActiveServerStmt:         q.removePrevActiveServerStmt,
		removePrevActiveServerClientStmt:   q.removePrevActiveServerClientStmt,
		removeTrackingByMessageIdStmt:      q.removeTrackingByMessageIdStmt,
		setPlayerCountNotificationStmt:     q.setPlayerCountNotificationStmt,
		startChannelStmt:                   q.startChannelStmt,
		stopChannelStmt:                    q.stopChannelStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: flag_mappings.sql

package sqlc

import (
	"context"
)

const addFlagMapping = `-- name: AddFlagMapping :exec
INSERT INTO flag_mappings (
    guild_id,
    channel_id,
    flag_id,
	emoji
) VALUES ($1, $2, $3, $4)
ON CONFLICT (channel_id, flag_id) DO UPDATE
SET
	guild_id = $1,
    emoji = $4
`

type AddFlagMappingParams struct {
	GuildID   int64  `db:"guild_id"`
	ChannelID int64  `db:"channel_id"`
	FlagID    int16  `db:"flag_id"`
	Emoji     string `db:"emoji"`
}

func (q *Queries) AddFlagMapping(ctx context.Context, arg AddFlagMappingParams) error {
	_, err := q.db.Exec(ctx, addFlagMapping,
		arg.GuildID,
		arg.ChannelID,
		arg.FlagID,
		arg.Emoji,
	)
	return err
}

const getFlagMapping = `-- name: GetFlagMapping :many
SELECT
	m.flag_id,
	m.emoji,
	f.abbr
FROM flag_mappings m
JOIN flags f ON m.flag_id = f.flag_id
WHERE m.guild_id = $1
AND m.channel_id = $2
AND m.flag_id = $3
LIMIT 1
`

type GetFlagMappingParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	FlagID    int16 `db:"flag_id"`
}

type GetFlagMappingRow struct {
	FlagID int16  `db:"flag_id"`
	Emoji  string `db:"emoji"`
	Abbr   string `db:"abbr"`
}

func (q *Queries) GetFlagMapping(ctx context.Context, arg GetFlagMappingParams) ([]GetFlagMappingRow, error) {
	rows, err := q.db.Query(ctx, getFlagMapping, arg.GuildID, arg.ChannelID, arg.FlagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFlagMappingRow{}
	for rows.Next() {
		var i GetFlagMappingRow
		if err := rows.Scan(&i.FlagID, &i.Emoji, &i.Abbr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlagMappings = `-- name: ListFlagMappings :many
SELECT
    m.flag_id,
	m.emoji,
	f.abbr
FROM flag_mappings m
JOIN flags f ON m.flag_id = f.flag_id
WHERE m.guild_id = $1
AND m.channel_id = $2
ORDER BY f.abbr ASC
`

type ListFlagMappingsParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
}

type ListFlagMappingsRow struct {
	FlagID int16  `db:"flag_id"`
	Emoji  string `db:"emoji"`
	Abbr   string `db:"abbr"`
}

func (q *Queries) ListFlagMappings(ctx context.Context, arg ListFlagMappingsParams) ([]ListFlagMappingsRow, error) {
	rows, err := q.db.Query(ctx, listFlagMappings, arg.GuildID, arg.ChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFlagMappingsRow{}
	for rows.Next() {
		var i ListFlagMappingsRow
		if err := rows.Scan(&i.FlagID, &i.Emoji, &i.Abbr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFlagMapping = `-- name: RemoveFlagMapping :exec
DELETE FROM flag_mappings
WHERE guild_id = $1
AND channel_id = $2
AND flag_id = $3
`

type RemoveFlagMappingParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	FlagID    int16 `db:"flag_id"`
}

func (q *Queries) RemoveFlagMapping(ctx context.Context, arg RemoveFlagMappingParams) error {
	_, err := q.db.Exec(ctx, removeFlagMapping, arg.GuildID, arg.ChannelID, arg.FlagID)
	return err
}

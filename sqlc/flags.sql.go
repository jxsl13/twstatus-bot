// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: flags.sql

package sqlc

import (
	"context"
)

const addFlag = `-- name: AddFlag :exec
REPLACE INTO flags (flag_id, abbr, emoji)
VALUES (?, ?, ?)
`

type AddFlagParams struct {
	FlagID int64
	Abbr   string
	Emoji  string
}

func (q *Queries) AddFlag(ctx context.Context, arg AddFlagParams) error {
	_, err := q.exec(ctx, q.addFlagStmt, addFlag, arg.FlagID, arg.Abbr, arg.Emoji)
	return err
}

const getFlag = `-- name: GetFlag :many
SELECT flag_id, abbr, emoji
FROM flags
WHERE flag_id = ?
LIMIT 1
`

func (q *Queries) GetFlag(ctx context.Context, flagID int64) ([]Flag, error) {
	rows, err := q.query(ctx, q.getFlagStmt, getFlag, flagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flag{}
	for rows.Next() {
		var i Flag
		if err := rows.Scan(&i.FlagID, &i.Abbr, &i.Emoji); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlagByAbbr = `-- name: GetFlagByAbbr :many
SELECT flag_id, abbr, emoji
FROM flags
WHERE abbr = ?
LIMIT 1
`

func (q *Queries) GetFlagByAbbr(ctx context.Context, abbr string) ([]Flag, error) {
	rows, err := q.query(ctx, q.getFlagByAbbrStmt, getFlagByAbbr, abbr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flag{}
	for rows.Next() {
		var i Flag
		if err := rows.Scan(&i.FlagID, &i.Abbr, &i.Emoji); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlags = `-- name: ListFlags :many
SELECT flag_id, abbr, emoji FROM flags ORDER BY abbr ASC
`

func (q *Queries) ListFlags(ctx context.Context) ([]Flag, error) {
	rows, err := q.query(ctx, q.listFlagsStmt, listFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flag{}
	for rows.Next() {
		var i Flag
		if err := rows.Scan(&i.FlagID, &i.Abbr, &i.Emoji); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

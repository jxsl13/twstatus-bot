// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: guild.sql

package sqlc

import (
	"context"
)

const addGuild = `-- name: AddGuild :exec
INSERT INTO guilds (
    guild_id,
    description
) VALUES (?, ?)
`

type AddGuildParams struct {
	GuildID     int64
	Description string
}

func (q *Queries) AddGuild(ctx context.Context, arg AddGuildParams) error {
	_, err := q.exec(ctx, q.addGuildStmt, addGuild, arg.GuildID, arg.Description)
	return err
}

const getGuild = `-- name: GetGuild :many
SELECT guild_id, description
FROM guilds
WHERE guild_id = ?
LIMIT 1
`

func (q *Queries) GetGuild(ctx context.Context, guildID int64) ([]Guild, error) {
	rows, err := q.query(ctx, q.getGuildStmt, getGuild, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Guild{}
	for rows.Next() {
		var i Guild
		if err := rows.Scan(&i.GuildID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGuilds = `-- name: ListGuilds :many
SELECT guild_id, description
FROM guilds
ORDER BY guild_id ASC
`

func (q *Queries) ListGuilds(ctx context.Context) ([]Guild, error) {
	rows, err := q.query(ctx, q.listGuildsStmt, listGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Guild{}
	for rows.Next() {
		var i Guild
		if err := rows.Scan(&i.GuildID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGuild = `-- name: RemoveGuild :exec
DELETE FROM guilds WHERE guild_id = ?
`

func (q *Queries) RemoveGuild(ctx context.Context, guildID int64) error {
	_, err := q.exec(ctx, q.removeGuildStmt, removeGuild, guildID)
	return err
}

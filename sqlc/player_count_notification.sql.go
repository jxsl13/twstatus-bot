// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player_count_notification.sql

package sqlc

import (
	"context"
)

const getMessageTargetNotifications = `-- name: GetMessageTargetNotifications :many
SELECT
	user_id,
	threshold
FROM player_count_notifications
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
ORDER BY user_id ASC
`

type GetMessageTargetNotificationsParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
}

type GetMessageTargetNotificationsRow struct {
	UserID    int64 `db:"user_id"`
	Threshold int16 `db:"threshold"`
}

func (q *Queries) GetMessageTargetNotifications(ctx context.Context, arg GetMessageTargetNotificationsParams) ([]GetMessageTargetNotificationsRow, error) {
	rows, err := q.db.Query(ctx, getMessageTargetNotifications, arg.GuildID, arg.ChannelID, arg.MessageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageTargetNotificationsRow{}
	for rows.Next() {
		var i GetMessageTargetNotificationsRow
		if err := rows.Scan(&i.UserID, &i.Threshold); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerCountNotification = `-- name: GetPlayerCountNotification :many
SELECT
	guild_id,
	channel_id,
	message_id,
	user_id,
	threshold
FROM player_count_notifications
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
AND user_id = $4
LIMIT 1
`

type GetPlayerCountNotificationParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
}

func (q *Queries) GetPlayerCountNotification(ctx context.Context, arg GetPlayerCountNotificationParams) ([]PlayerCountNotification, error) {
	rows, err := q.db.Query(ctx, getPlayerCountNotification,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayerCountNotification{}
	for rows.Next() {
		var i PlayerCountNotification
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.MessageID,
			&i.UserID,
			&i.Threshold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerCountNotifications = `-- name: ListPlayerCountNotifications :many
SELECT
	guild_id,
	channel_id,
	message_id,
	user_id,
	threshold
FROM player_count_notifications
ORDER BY
    guild_id ASC,
    channel_id ASC,
    message_id ASC,
    user_id ASC
`

func (q *Queries) ListPlayerCountNotifications(ctx context.Context) ([]PlayerCountNotification, error) {
	rows, err := q.db.Query(ctx, listPlayerCountNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayerCountNotification{}
	for rows.Next() {
		var i PlayerCountNotification
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.MessageID,
			&i.UserID,
			&i.Threshold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePlayerCountNotification = `-- name: RemovePlayerCountNotification :exec
DELETE FROM player_count_notifications
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
AND user_id = $4
AND threshold = $5
`

type RemovePlayerCountNotificationParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
	Threshold int16 `db:"threshold"`
}

func (q *Queries) RemovePlayerCountNotification(ctx context.Context, arg RemovePlayerCountNotificationParams) error {
	_, err := q.db.Exec(ctx, removePlayerCountNotification,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
		arg.Threshold,
	)
	return err
}

const removePlayerCountNotifications = `-- name: RemovePlayerCountNotifications :exec
DELETE FROM player_count_notifications
`

func (q *Queries) RemovePlayerCountNotifications(ctx context.Context) error {
	_, err := q.db.Exec(ctx, removePlayerCountNotifications)
	return err
}

const setPlayerCountNotification = `-- name: SetPlayerCountNotification :exec
INSERT INTO player_count_notifications (
	guild_id,
	channel_id,
	message_id,
	user_id,
	threshold
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (guild_id, channel_id, message_id, user_id)
DO UPDATE SET threshold = $5
`

type SetPlayerCountNotificationParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
	Threshold int16 `db:"threshold"`
}

func (q *Queries) SetPlayerCountNotification(ctx context.Context, arg SetPlayerCountNotificationParams) error {
	_, err := q.db.Exec(ctx, setPlayerCountNotification,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
		arg.Threshold,
	)
	return err
}

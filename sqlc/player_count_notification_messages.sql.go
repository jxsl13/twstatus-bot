// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player_count_notification_messages.sql

package sqlc

import (
	"context"
)

const addPlayerCountNotificationMessage = `-- name: AddPlayerCountNotificationMessage :exec
INSERT INTO player_count_notification_messages (channel_id, message_id)
VALUES ($1, $2)
ON CONFLICT (channel_id)
DO UPDATE SET
    message_id = EXCLUDED.message_id
`

type AddPlayerCountNotificationMessageParams struct {
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
}

func (q *Queries) AddPlayerCountNotificationMessage(ctx context.Context, arg AddPlayerCountNotificationMessageParams) error {
	_, err := q.db.Exec(ctx, addPlayerCountNotificationMessage, arg.ChannelID, arg.MessageID)
	return err
}

const getPlayerCountNotificationMessages = `-- name: GetPlayerCountNotificationMessages :many
SELECT
	t.guild_id,
	t.channel_id,
	COALESCE(pcm.message_id, 0)::bigint AS prev_message_id,
	pcn.user_id,
	MAX(COALESCE(np.num_players, 0))::smallint AS num_players
FROM tracking t
LEFT JOIN (
	SELECT ac.address, count(*) AS num_players
	FROM active_server_clients ac
	GROUP BY ac.address
	ORDER BY ac.address
) np ON np.address = t.address
JOIN player_count_notifications pcn
ON (
	t.guild_id = pcn.guild_id AND
	t.channel_id = pcn.channel_id AND
	t.message_id = pcn.message_id AND
	num_players >= pcn.threshold
)
LEFT JOIN player_count_notification_messages pcm
ON (t.channel_id = pcm.channel_id)
GROUP BY t.guild_id, t.channel_id, pcm.message_id, pcn.user_id, num_players
ORDER BY t.guild_id, t.channel_id, pcm.message_id, num_players, pcn.user_id
`

type GetPlayerCountNotificationMessagesRow struct {
	GuildID       int64 `db:"guild_id"`
	ChannelID     int64 `db:"channel_id"`
	PrevMessageID int64 `db:"prev_message_id"`
	UserID        int64 `db:"user_id"`
	NumPlayers    int16 `db:"num_players"`
}

func (q *Queries) GetPlayerCountNotificationMessages(ctx context.Context) ([]GetPlayerCountNotificationMessagesRow, error) {
	rows, err := q.db.Query(ctx, getPlayerCountNotificationMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlayerCountNotificationMessagesRow{}
	for rows.Next() {
		var i GetPlayerCountNotificationMessagesRow
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.PrevMessageID,
			&i.UserID,
			&i.NumPlayers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePlayerCountNotificationMessage = `-- name: RemovePlayerCountNotificationMessage :exec
DELETE FROM player_count_notification_messages
WHERE channel_id = $1
AND message_id = $2
`

type RemovePlayerCountNotificationMessageParams struct {
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
}

func (q *Queries) RemovePlayerCountNotificationMessage(ctx context.Context, arg RemovePlayerCountNotificationMessageParams) error {
	_, err := q.db.Exec(ctx, removePlayerCountNotificationMessage, arg.ChannelID, arg.MessageID)
	return err
}

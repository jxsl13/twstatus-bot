// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player_count_notification_request.sql

package sqlc

import (
	"context"
)

const getPlayerCountNotificationRequest = `-- name: GetPlayerCountNotificationRequest :many
SELECT
	guild_id,
	channel_id,
	message_id,
	user_id,
	threshold
FROM player_count_notification_requests
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
AND user_id = $4
LIMIT 1
`

type GetPlayerCountNotificationRequestParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
}

func (q *Queries) GetPlayerCountNotificationRequest(ctx context.Context, arg GetPlayerCountNotificationRequestParams) ([]PlayerCountNotificationRequest, error) {
	rows, err := q.db.Query(ctx, getPlayerCountNotificationRequest,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayerCountNotificationRequest{}
	for rows.Next() {
		var i PlayerCountNotificationRequest
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.MessageID,
			&i.UserID,
			&i.Threshold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePlayerCountNotificationRequest = `-- name: RemovePlayerCountNotificationRequest :exec
DELETE FROM player_count_notification_requests
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
AND user_id = $4
AND threshold = $5
`

type RemovePlayerCountNotificationRequestParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
	Threshold int16 `db:"threshold"`
}

func (q *Queries) RemovePlayerCountNotificationRequest(ctx context.Context, arg RemovePlayerCountNotificationRequestParams) error {
	_, err := q.db.Exec(ctx, removePlayerCountNotificationRequest,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
		arg.Threshold,
	)
	return err
}

const removePlayerCountNotificationRequests = `-- name: RemovePlayerCountNotificationRequests :exec
DELETE FROM player_count_notification_requests
`

func (q *Queries) RemovePlayerCountNotificationRequests(ctx context.Context) error {
	_, err := q.db.Exec(ctx, removePlayerCountNotificationRequests)
	return err
}

const setPlayerCountNotificationRequest = `-- name: SetPlayerCountNotificationRequest :exec
INSERT INTO player_count_notification_requests (
	guild_id,
	channel_id,
	message_id,
	user_id,
	threshold
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (guild_id, channel_id, message_id, user_id)
DO UPDATE SET threshold = $5
`

type SetPlayerCountNotificationRequestParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
	UserID    int64 `db:"user_id"`
	Threshold int16 `db:"threshold"`
}

func (q *Queries) SetPlayerCountNotificationRequest(ctx context.Context, arg SetPlayerCountNotificationRequestParams) error {
	_, err := q.db.Exec(ctx, setPlayerCountNotificationRequest,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageID,
		arg.UserID,
		arg.Threshold,
	)
	return err
}

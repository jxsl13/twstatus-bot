// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: prev_mentions.sql

package sqlc

import (
	"context"
)

const listPreviousMessageMentions = `-- name: ListPreviousMessageMentions :many
SELECT
	guild_id,
	channel_id,
	message_id,
	user_id
FROM prev_message_mentions
ORDER BY guild_id ASC, channel_id ASC, message_id ASC, user_id ASC
`

func (q *Queries) ListPreviousMessageMentions(ctx context.Context) ([]PrevMessageMention, error) {
	rows, err := q.db.Query(ctx, listPreviousMessageMentions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PrevMessageMention{}
	for rows.Next() {
		var i PrevMessageMention
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.MessageID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMessageMentions = `-- name: RemoveMessageMentions :exec
DELETE FROM prev_message_mentions
WHERE guild_id = $1
AND channel_id = $2
AND message_id = $3
`

type RemoveMessageMentionsParams struct {
	GuildID   int64 `db:"guild_id"`
	ChannelID int64 `db:"channel_id"`
	MessageID int64 `db:"message_id"`
}

func (q *Queries) RemoveMessageMentions(ctx context.Context, arg RemoveMessageMentionsParams) error {
	_, err := q.db.Exec(ctx, removeMessageMentions, arg.GuildID, arg.ChannelID, arg.MessageID)
	return err
}

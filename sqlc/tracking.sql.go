// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tracking.sql

package sqlc

import (
	"context"
)

const addTracking = `-- name: AddTracking :exec
INSERT INTO tracking (
    guild_id,
    channel_id,
    address,
    message_id
) VALUES (?, ?, ?, ?)
`

type AddTrackingParams struct {
	GuildID   int64
	ChannelID int64
	Address   string
	MessageID int64
}

func (q *Queries) AddTracking(ctx context.Context, arg AddTrackingParams) error {
	_, err := q.exec(ctx, q.addTrackingStmt, addTracking,
		arg.GuildID,
		arg.ChannelID,
		arg.Address,
		arg.MessageID,
	)
	return err
}

const listAllTrackings = `-- name: ListAllTrackings :many
SELECT guild_id, channel_id, address, message_id
FROM tracking
ORDER BY guild_id ASC, channel_id ASC, message_id ASC
`

type ListAllTrackingsRow struct {
	GuildID   int64
	ChannelID int64
	Address   string
	MessageID int64
}

func (q *Queries) ListAllTrackings(ctx context.Context) ([]ListAllTrackingsRow, error) {
	rows, err := q.query(ctx, q.listAllTrackingsStmt, listAllTrackings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllTrackingsRow{}
	for rows.Next() {
		var i ListAllTrackingsRow
		if err := rows.Scan(
			&i.GuildID,
			&i.ChannelID,
			&i.Address,
			&i.MessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTrackingByMessageId = `-- name: RemoveTrackingByMessageId :exec
DELETE FROM tracking
WHERE guild_id = ?
AND message_id = ?
`

type RemoveTrackingByMessageIdParams struct {
	GuildID   int64
	MessageID int64
}

func (q *Queries) RemoveTrackingByMessageId(ctx context.Context, arg RemoveTrackingByMessageIdParams) error {
	_, err := q.exec(ctx, q.removeTrackingByMessageIdStmt, removeTrackingByMessageId, arg.GuildID, arg.MessageID)
	return err
}
